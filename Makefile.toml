# Better Documentation
# Manual for Students
# Brush-Up C Concepts (Questions about Pointers)
# Virtual Memory + Copy-On-Write

[env]
KERNEL_FILES = """
kernel/src/boot/linker.ld
build/entry.o
build/long.o
build/kernel.a
"""
BOOTLOADER_FILES = """
bootloader/src/linker.ld
build/boot.o
build/bootloader.a
"""
DEBUG_MODE = "vga"

# Ensure everything is in place and clear build folder
[tasks.clean]
clear = true
script = [
    "mkdir -p build",
    "rm -rf ./build/*",
]

# Build bootloader asm files
[tasks.build_bootloader]
dependencies = ["clean"]
workspace = false
script = [
    "export KERNEL_SECTORS=$(./scripts/get_size.sh)",
    "echo $KERNEL_SECTORS",
    "cd bootloader",
    "nasm -dKERNEL_SIZE=$KERNEL_SECTORS -f bin src/boot.asm -o ../build/boot.bin", # Compile bootloader binary
]

# Build kernel asm files
[tasks.build_kernel]
dependencies = ["clean"]
workspace = false
script = [
    "cd kernel",
    "nasm -f elf64 src/boot/entry.asm -o ../build/entry.o",             # Compile entry point asm
    "nasm -f elf64 src/boot/long.asm -o ../build/long.o",               # Compile long mode asm
    "cargo build --target x86_64-target.json --features ${DEBUG_MODE}", # Build Kernel
    "cd ..",
    "cp target/x86_64-target/debug/libbuzz_os_kernel.a build/kernel.a", # Copy Kernel ELF to build folder
    "ld -n -o build/kernel.elf -T ${KERNEL_FILES}",                     # Link Kernel ELF and ASM ELFs
    "objcopy -O binary build/kernel.elf build/kernel.bin",
    "objdump -S build/kernel.elf > build/kernel.asm"
]

# Build bootloader asm files
[tasks.debug]
dependencies = ["build_kernel", "build_bootloader"]
workspace = false
script = [
    "dd if=/dev/zero of=build/buzz.img count=10000",
    "dd if=build/boot.bin of=build/buzz.img conv=notrunc",
    "dd if=build/kernel.bin of=build/buzz.img seek=1 conv=notrunc",
    "scripts/build.sh"
]